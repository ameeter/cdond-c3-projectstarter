version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Delete S3 files
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7} "
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            # exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here 
    steps:
      - restore_cache:
          key: backend-build
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            #SUCCESS='curl https://kvdb.io/7iKzLiSyAUUM15XfoKBFeh/migration_${CIRCLE_WORKFLOW_ID:0:7}'
            SUCCESS=$(curl -k https://kvdb.io/7iKzLiSyAUUM15XfoKBFeh/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              #Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
              #exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      #- restore_cache:
      #    keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            #exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
             # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - run:
          name: Get compiled code 
          command: |
            mkdir /tmp/workspace/
            cp ./backend/package.json /tmp/workspace/
            cd backend/dist
            tar -zcvf /tmp/workspace/backend.tar.gz ./
            tar -zcvf ./../../backend.tar.gz ./    #to be removed
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - package.json
            - backend.tar.gz

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]    
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]    
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]    
      - run:
          name: Front-end scan
          command: |
           cd frontend
           npm install
           # npm install oauth-sign@^0.9.0
           npm audit fix --audit-level=critical --force
           #npm audit fix --force
           #npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]    
      - run:
          name: Back-end scan
          command: |
           cd backend
           npm install
           # npm install oauth-sign@^0.9.0
           npm audit fix --audit-level=critical --force
           # npm audit fix --force
           # npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: install tar gzip
          command: |
              yum -y install tar and gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            echo "[web]" > ~/inventory.txt
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ~/inventory.txt
            echo ~/inventory.txt
            #exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure   

  configure-infrastructure:
    docker:
      - image: python:3.10.4 # Docker image here that supports Ansible python:3.10.4
    steps:
      - checkout
      - add_ssh_keys:
            # You can get this ID in the section where you registered the SSH Key
            fingerprints: ["3a:44:ff:ad:19:7e:a4:61:1e:33:09:4e:48:a3:00:6b"] 
      # attach workspace
      - attach_workspace:
          at: ~/
      - run: cat ~/inventory.txt
      - run:
          name: Install dependencies
          command: |
            # Your code here
            #apk add --update ansible
            #yum install -y tar gzip
            pip install pip --upgrade
            pip install ansible awscli
           # exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            cd backend
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            cd ..
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/inventory.txt .circleci/ansible/configure-server.yml
            #exit 1
      # Here's where you will add some code to rollback on failure  
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependancies
          command: |
            #npm update
            #sudo apt-get update
            #sudo apt upgrade -y
            #sudo apt update
            #sudo apt install python3 python3-pip python3-setuptools -y
            #python3 -m pip install awscli
            sudo apt-get update && sudo apt-get install -yy less
            sudo apt-get install unzip -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          no_output_timeout: 20m
          command: |
            # Your code here
            cd backend
            pwd
            ls -al
            npm install
            sudo npm install pm2 -g
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            echo "migraition dump :============================== "
            cat migrations_dump.txt
            migration_succesful=$(cat migrations_dump.txt | grep -c "has been executed successfully")
            if [ $migration_succesful > 0 ]; then exit 0; else exit 1; fi;
      - run:
          name: Send migration results to KVDB
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/7iKzLiSyAUUM15XfoKBFeh/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt upgrade -y
            sudo apt update
            sudo apt install python3 python3-pip python3-setuptools -y
            python3 -m pip install awscli
      - run:
          name: Get backend url
          command: |
            touch ".env"
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install || exit 1
            npm run build || exit 1
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive || exit 1
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment 

  deploy-backend:
    docker:
      - image: circleci/node:13.8.0 #python:3.10.4 #python:3.7-alpine3.11 # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["3a:44:ff:ad:19:7e:a4:61:1e:33:09:4e:48:a3:00:6b"] 
      # attach workspace
      - attach_workspace:
          at: ~/
      - attach_workspace:
          at: /tmp/workspace
      - restore_cache:
          keys: [backend-build]    
      - run:
          name: Install dependencies
          command: |
            # Your code here
            #apk add --update ansible tar gzip nodejs npm openssh-client
            #pip install awscli
            #pip install pip --upgrade
            #pip install ansible awscli
            #yum install -y tar gzip
            sudo apt-get update
            sudo apt upgrade -y
            sudo apt update
            sudo apt install python3 python3-pip python3-setuptools -y
            python3 -m pip install ansible awscli
           # exit 1
      - run:
          name: Deploy backend
          command: |
            # Your code here
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            cat ~/inventory.txt
            #export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure 
      - revert-migrations
      - destroy-environment 

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.10.4
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apt update
            apt install -y curl nodejs npm
            pip install pip --upgrade
            pip install awscli
            #apk add --update curl nodejs npm
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[].Instances[*].PublicIpAddress" --output text)
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[].Instances[*].PublicIpAddress" --output text)
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            curl "${API_URL}/api/status"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            export FRONT_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-1.amazonaws.com/#/employees"        
            curl -s ${FRONT_URL} | grep "Welcome"
            echo ${FRONT_URL} 
            if curl -s ${FRONT_URL} | grep "Welcome"
            then
              exit 1
            else
              exit 1
            fi

      # Here's where you will add some code to rollback on failure  
      - revert-migrations
      - destroy-environment


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend]#, scan-frontend, scan-backend]..
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]#[configure-infrastructure]#
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup:
      #    requires: [cloudfront-update]

